install.packages("RcmdrPlugin.DoE")
require(RcdmrPlugin.DoE)
require(RcdmrPlugin.DoE)
install.packages("RcmdrPlugin.DoE")
require(RcdmrPlugin.DoE)
install.packages("RcmdrPlugin.DoE")
install.packages("RcmdrPlugin.DoE")
require(RcmdrPlugin.Doe)
require(RcmdrPlugin.DoE)
install.packages("RcmdrPlugin.DoE")
require(RcmdrPlugin.DoE)
install.packages("swirl")
5+5
#This function creates the traffic distribution for parks and recreational centers and writes to a .csv for the Database
parkData <- read.csv("parks_rec.csv", header = T, stringsAsFactors = F)
indivData <- read.csv("individuals.csv", header = T, stringsAsFactors = F) #read the population data to get total population
visPyPr <- 29 #visits per year per person, referenced from nrpa.org
meanPPark <- visPyPr * length(indivData$ID) / (length(parkData$Parks)*52) #calculate traffic per week (mean)
visVec <- rnorm(length(parkData$Parks), meanPPark, 1000) #sample from normal distribution
parkData$Traffic.Week <- visVec
write.csv(parkData, file = "parkData.csv", row.names = F) #write to csv
#This function creates the traffic distribution for shopping centers and writes to a .csv for the Database
storeData <- read.csv("stores.csv", header = T, stringsAsFactors = F)
meanStoreTraffic <- 13500 #referenced from distributech.net/demographics.aspx
stdv <- 3000 #same as above
storeData$Traffic.Week <- floor(rnorm(length(storeData$?..Name), 13500, 3000)) #sampling from normal distribution
storeData$Traffic.Week[storeData$?..Name %in% c("Walmart","Walmart WL")] = 20000 #use Walmart data referenced
colnames(storeData) <- c("Name", "Region", "Traffic_Week")
write.csv(storeData, file = "storeData.csv", row.names = F)
? exteuclid
install.packages("VeryLargeIntegers")
? exteuclid
library(VeryLargeIntegers)
? exteuclid
exteuclid(3,6976494)
plot(c(1:10),c(1:10
))
file <- sprintf("Case%d.rda", case)
file2 <- sprintf("Case%db.rda",case)
gif <- sprintf("Case%dRerun.gif", case)
graphname <- sprintf("SIR(D) Model of %s within WL/L Population with %d initially infected individuals over 100 days", disease, infnum)
load(file)
totalPeople <- length(pop$ID)
pctSus <- (susceptible/totalPeople) * 100
pctInf <- (numInfected/totalPeople)*100
pctRecov <- (numRecovered/totalPeople)*100
pctDead <- (numDead/totalPeople)*100
#After policy implementation
load(file2)
pctSus2 <- (susceptible/totalPeople) * 100
pctInf2 <- (numInfected/totalPeople)*100
pctRecov2 <- (numRecovered/totalPeople)*100
pctDead2 <- (numDead/totalPeople)*100
setwd("~/Google Drive/IE332 Project/Code/Cases/RDA Files")
file <- sprintf("Case%d.rda", case)
file2 <- sprintf("Case%db.rda",case)
gif <- sprintf("Case%dRerun.gif", case)
graphname <- sprintf("SIR(D) Model of %s within WL/L Population with %d initially infected individuals over 100 days", disease, infnum)
load(file)
totalPeople <- length(pop$ID)
pctSus <- (susceptible/totalPeople) * 100
pctInf <- (numInfected/totalPeople)*100
pctRecov <- (numRecovered/totalPeople)*100
pctDead <- (numDead/totalPeople)*100
#After policy implementation
load(file2)
pctSus2 <- (susceptible/totalPeople) * 100
pctInf2 <- (numInfected/totalPeople)*100
pctRecov2 <- (numRecovered/totalPeople)*100
pctDead2 <- (numDead/totalPeople)*100
case <- 10
disease <- "Smallpox"
infnum <- 1
file <- sprintf("Case%d.rda", case)
file2 <- sprintf("Case%db.rda",case)
gif <- sprintf("Case%dRerun.gif", case)
graphname <- sprintf("SIR(D) Model of %s within WL/L Population with %d initially infected individuals over 100 days", disease, infnum)
load(file)
totalPeople <- length(pop$ID)
pctSus <- (susceptible/totalPeople) * 100
pctInf <- (numInfected/totalPeople)*100
pctRecov <- (numRecovered/totalPeople)*100
pctDead <- (numDead/totalPeople)*100
#After policy implementation
load(file2)
pctSus2 <- (susceptible/totalPeople) * 100
pctInf2 <- (numInfected/totalPeople)*100
pctRecov2 <- (numRecovered/totalPeople)*100
pctDead2 <- (numDead/totalPeople)*100
duration <- 100
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(85, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
i <- 100
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(85, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(80, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
case <- 12
library(animation)
case <- 12
for (disease in c("Influenza", "Smallpox", "Measles", "Ebola")){
for (infnum in c(1, 1, 1, 3, 3, 3, 10, 10, 10)){
file <- sprintf("Case%d.rda", case)
file2 <- sprintf("Case%db.rda",case)
gif <- sprintf("Case%dRerun.gif", case)
graphname <- sprintf("SIR(D) Model of %s within WL/L Population with %d initially infected individuals over 100 days", disease, infnum)
load(file)
totalPeople <- length(pop$ID)
pctSus <- (susceptible/totalPeople) * 100
pctInf <- (numInfected/totalPeople)*100
pctRecov <- (numRecovered/totalPeople)*100
pctDead <- (numDead/totalPeople)*100
#After policy implementation
load(file2)
pctSus2 <- (susceptible/totalPeople) * 100
pctInf2 <- (numInfected/totalPeople)*100
pctRecov2 <- (numRecovered/totalPeople)*100
pctDead2 <- (numDead/totalPeople)*100
#Code is modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
animate <- function(duration, pctSus, pctInf, pctRecov, pctDead, pctSus2, pctInf2, pctRecov2, pctDead2){
#Set delay between frames when replaying
ani.options(interval=.05)
# Set up a vector of colors for use below
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:duration) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
plot(-5, xlim = c(1,duration), ylim = c(0, .3), axes = F, xlab = "", ylab = "", main = "Day")
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set up the bottom chart
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(80, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
}
}, movie.name = gif)
}
animate(100,pctSus,pctInf, pctRecov, pctDead, pctSus2, pctInf2, pctRecov2, pctDead2)
)
library(animation)
case <- 12
for (disease in c("Influenza", "Smallpox", "Measles", "Ebola")){
for (infnum in c(1, 1, 1, 3, 3, 3, 10, 10, 10)){
file <- sprintf("Case%d.rda", case)
file2 <- sprintf("Case%db.rda",case)
gif <- sprintf("Case%dRerun.gif", case)
graphname <- sprintf("SIR(D) Model of %s within WL/L Population with %d initially infected individuals over 100 days", disease, infnum)
load(file)
totalPeople <- length(pop$ID)
pctSus <- (susceptible/totalPeople) * 100
pctInf <- (numInfected/totalPeople)*100
pctRecov <- (numRecovered/totalPeople)*100
pctDead <- (numDead/totalPeople)*100
#After policy implementation
load(file2)
pctSus2 <- (susceptible/totalPeople) * 100
pctInf2 <- (numInfected/totalPeople)*100
pctRecov2 <- (numRecovered/totalPeople)*100
pctDead2 <- (numDead/totalPeople)*100
#Code is modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
animate <- function(duration, pctSus, pctInf, pctRecov, pctDead, pctSus2, pctInf2, pctRecov2, pctDead2){
#Set delay between frames when replaying
ani.options(interval=.05)
# Set up a vector of colors for use below
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:duration) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
plot(-5, xlim = c(1,duration), ylim = c(0, .3), axes = F, xlab = "", ylab = "", main = "Day")
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set up the bottom chart
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(80, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
}
}, movie.name = gif)
}
animate(100,pctSus,pctInf, pctRecov, pctDead, pctSus2, pctInf2, pctRecov2, pctDead2)
library(animation)
case <- 12
disease <- "Smallpox"
case <- 12
disease <- "Smallpox"
infnum <- 1
file <- sprintf("Case%d.rda", case)
file2 <- sprintf("Case%db.rda",case)
gif <- sprintf("Case%dRerun.gif", case)
graphname <- sprintf("SIR(D) Model of %s within WL/L Population with %d initially infected individuals over 100 days", disease, infnum)
load(file)
totalPeople <- length(pop$ID)
pctSus <- (susceptible/totalPeople) * 100
pctInf <- (numInfected/totalPeople)*100
pctRecov <- (numRecovered/totalPeople)*100
pctDead <- (numDead/totalPeople)*100
#After policy implementation
load(file2)
pctSus2 <- (susceptible/totalPeople) * 100
pctInf2 <- (numInfected/totalPeople)*100
pctRecov2 <- (numRecovered/totalPeople)*100
pctDead2 <- (numDead/totalPeople)*100
#Code is modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
animate <- function(duration, pctSus, pctInf, pctRecov, pctDead, pctSus2, pctInf2, pctRecov2, pctDead2){
#Set delay between frames when replaying
ani.options(interval=.05)
# Set up a vector of colors for use below
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:duration) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
plot(-5, xlim = c(1,duration), ylim = c(0, .3), axes = F, xlab = "", ylab = "", main = "Day")
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set up the bottom chart
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(80, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
}
}, movie.name = gif)
}
animate(100,pctSus,pctInf, pctRecov, pctDead, pctSus2, pctInf2, pctRecov2, pctDead2)
)
setwd("~/Google Drive/IE332 Project/Code/Cases/RDA Files")
disease <- "Smallpox"
case <- 12
infnum <- 1
file <- sprintf("Case%d.rda", case)
file2 <- sprintf("Case%db.rda",case)
gif <- sprintf("Case%dRerun.gif", case)
graphname <- sprintf("SIR(D) Model of %s within WL/L Population with %d initially infected individuals over 100 days", disease, infnum)
load(file)
totalPeople <- length(pop$ID)
pctSus <- (susceptible/totalPeople) * 100
pctInf <- (numInfected/totalPeople)*100
pctRecov <- (numRecovered/totalPeople)*100
pctDead <- (numDead/totalPeople)*100
#After policy implementation
load(file2)
pctSus2 <- (susceptible/totalPeople) * 100
pctInf2 <- (numInfected/totalPeople)*100
pctRecov2 <- (numRecovered/totalPeople)*100
pctDead2 <- (numDead/totalPeople)*100
#Code is modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
animate <- function(duration, pctSus, pctInf, pctRecov, pctDead, pctSus2, pctInf2, pctRecov2, pctDead2){
#Set delay between frames when replaying
ani.options(interval=.05)
# Set up a vector of colors for use below
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:duration) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
plot(-5, xlim = c(1,duration), ylim = c(0, .3), axes = F, xlab = "", ylab = "", main = "Day")
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set up the bottom chart
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(80, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
}
}, movie.name = gif)
}
animate(100,pctSus,pctInf, pctRecov, pctDead, pctSus2, pctInf2, pctRecov2, pctDead2)
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(80, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
i <- 100
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(80, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(80, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
plot(c(1:10), c(1:10))
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(80, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
duration <- 100
plot(pctSus[1:i], main = graphname, type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue", lty = 4)
lines(pctInf[1:i], type = "l", col = "red", lty = 4)
lines(pctRecov[1:i], type = "l", col = "green", lty = 4)
lines(pctDead[1:i], type = "l", col = "black", lty = 4)
lines(pctSus2[1:i], type = "l", col = "blue")
lines(pctInf2[1:i], type = "l", col = "red")
lines(pctRecov2[1:i], type = "l", col = "green")
lines(pctDead2[1:i], type = "l", col = "black")
legend(80, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead","Suceptible Old", "Infected Old", "Recovered Old", "Dead Old"),
col=c("blue", "red", "green", "black","blue", "red", "green", "black"), lty = c(1,1,1,1,4,4,4,4), lwd= 1, cex=0.8)
