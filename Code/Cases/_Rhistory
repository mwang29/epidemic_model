install.packages("pbapply")
library(RMySQL)
library(DBI)
library(partitions)
library(igraph)
library(pbapply)
########################################### Population and Database initialization ###################################
load("listDf_Final.rda") #Loads into object "listDf"
indivData <- read.csv("Individual.csv", header = T, stringsAsFactors = F)
#Data frame of individuals as rows
#Database Connection
con <- dbConnect(MySQL(), user="g1081391", password="Wif1hasnomeaning", dbname="g1081391", host="mydb.ics.purdue.edu")
on.exit(dbDisconnect(con))
################################################# Queries ###############################################
QEnd <- ") ORDER BY RAND() LIMIT " #ending query fragment to pull out only poisson # of contacts
# Select a poisson number of random Person_ID who belong to same ____ as our infected indiv
QWork <- "SELECT I.Person_ID AS Person_ID
FROM Individuals I, Works_At W
WHERE I.Person_ID = W.Person_ID AND W.Work_ID = (SELECT W.Work_ID
FROM Works_At W
WHERE W.Person_ID = "
QCommunity <- "SELECT I.Person_ID AS Person_ID
FROM Individuals I, Household H
WHERE I.Household_ID = H.Household_ID AND H.Region_Num = (SELECT H.Region_Num
FROM Individuals I, Household H
WHERE I.Household_ID = H.Household_ID
AND I.Person_ID = "
QDensity <- "SELECT R.Pop_Density
FROM Individuals I, Household H, Region R
WHERE I.Household_ID = H.Household_ID AND H.Region_Num = R.Region_Num
AND I.Person_ID = "
QAvgDensity <- "SELECT AVG(Pop_Density)
FROM Region;"
QBus <- "SELECT DISTINCT I.Person_ID AS Person_ID
FROM Individuals I, Household H, Bus_Routes B
WHERE I.Household_ID = H.Household_ID AND H.Region_Num = B.Region_Num AND H.PubTrans = 'YES' AND B.Bus_ID IN (SELECT DISTINCT B.Bus_ID
FROM Individuals I, Household H, Bus_Routes B
WHERE I.Household_ID = H.Household_ID AND H.Region_Num = B.Region_Num AND H.PubTrans = 'YES' AND I.Person_ID = "
QHousehold <- "SELECT I.Person_ID AS Person_ID
FROM Individuals I
WHERE I.Household_ID = (SELECT I.Household_ID
FROM Individuals I
WHERE I.Person_ID = "
#Multiplier Queries (Attributes of Individuals)
QWhite <- "SELECT I.Person_ID AS WhiteID
FROM Individuals I, Household H
WHERE I.Household_ID = H.Household_ID AND H.Race = 'White';"
QAsian <- "SELECT I.Person_ID AS AsianID
FROM Individuals I, Household H
WHERE I.Household_ID = H.Household_ID AND H.Race = 'Asian';"
QBlack <- "SELECT I.Person_ID AS BlackID
FROM Individuals I, Household H
WHERE I.Household_ID = H.Household_ID AND H.Race = 'Black';"
QHispanic <- "SELECT I.Person_ID AS HispanicID
FROM Individuals I, Household H
WHERE I.Household_ID = H.Household_ID AND H.Race = 'Hispanic';"
QMultirace <- "SELECT I.Person_ID AS MultiraceID
FROM Individuals I, Household H
WHERE I.Household_ID = H.Household_ID AND H.Race = 'Multirace';"
QAmerIndian <- "SELECT I.Person_ID AS AmerIndianID
FROM Individuals I, Household H
WHERE I.Household_ID = H.Household_ID AND H.Race = 'Amer Indian';"
QPov <- "SELECT I.Person_ID AS povID
FROM Individuals I, Household H
WHERE I.Household_ID = H.Household_ID AND H.Income = 'POV';"
Qinfant <- "SELECT I.Person_ID AS infantID
FROM Individuals I
WHERE I.Age <= 4;"
Qchild <- "SELECT I.Person_ID AS childID
FROM Individuals I
WHERE I.Age BETWEEN 5 AND 18;"
Qadult <- "SELECT I.Person_ID AS adultID
FROM Individuals I
WHERE I.Age BETWEEN 19 AND 64;"
Qsenior <- "SELECT I.Person_ID AS seniorID
FROM Individuals I
WHERE I.Age > 64;"
#Decide who to infect! and how many!
Qinf_IDs <- "SELECT I.Person_ID AS ID, I.Age AS Age
FROM Individuals I
ORDER BY RAND()
LIMIT "
########################################### Parameter intialization ###############################
pop <- data.frame(ID = c(1:length(indivData$Person_ID))) #individual IDs as a column
duration <- 100 #number of days for simulation
meanContactsDay <- 13.4 #https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2270306/
meanDensity <- dbGetQuery(con, QAvgDensity) #mean density of all regions
##############################################User inputs##############################################
diseaseType <- 3 #Enter type of disease 1= Influenza, 2 = Smallpox, 3 = Measles, 4 = Ebola
#Initial infected individuals ID by query
initialNumber <- 5 #3, 5, or 10
kPct <- 0.1#k nodes percentage to identify
####################################################################################################################
#variable declarations+ initialization:
tempdf <- dbGetQuery(con, paste0(Qinf_IDs,initialNumber))
inf_IDs <- tempdf$ID
totalPeople <- length(pop$ID) #total number of people
numInfected <- rep(length(inf_IDs),1)
numRecovered <- rep(0,1)
numDead <- rep(0,1)
susceptible <- rep((totalPeople - length(inf_IDs)),1)
nextInf_IDs <- vector()
cumDead_ID <- vector()
cumRecov_ID <- vector()
totalEdges <- data.frame(ID1 = inf_IDs, ID2 = NA) #initialize for all contacts in sim
#Disease Rate
avgMult <- mean(c(1,1,2.4,6)) #taken from plot of disease contagiousness
contagious <- 1/avgMult
ifelse(diseaseType == 2, contagious <- 2.4/avgMult,
ifelse(diseaseType == 3, contagious <- 6/avgMult, contagious <- 1/avgMult)) #contagious multiplier for disease type
#Normalized to White multipliers for each race to infectious disease (CDC)
raceMean <- mean(c(3.0,8.1,10.9,8.2,4.1,100))
raceWeight <- c(8.1/raceMean, 10.9/raceMean, 8.2/raceMean, 4.1/raceMean,4.1/raceMean) #asian, black, hispanic, amerindian, multirace
povWeight <- 1.5 #No exact multiplier can be found, but two biosecurity papers suggest strong correlations between poverty and influenza
#Age weight: 0-4, 5-18, 19-64, > 65
ageWeight <- c(0.0005775, 0.000575, 0.0003175, 0.000855)#transmission weight based on age and seasonal influenza
#Data taken from summing the columns of the transition probability matrix from https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2725959/
deathRate <- c(0.00005, 0.00003, 0.001,0.027) #for each age group: 0-4, 5-18, 19-64, > 65 for influenza
RecoveryRate <- 1/6 #rate = 1/ average time spent in infected class
#Produces logical vectors of Individual IDs of different demographics
whiteID <- dbGetQuery(con, QWhite)
asianID <- dbGetQuery(con, QAsian)
blackID <- dbGetQuery(con, QBlack)
hispanicID <- dbGetQuery(con, QHispanic)
multiraceID <- dbGetQuery(con, QMultirace)
amerindianID <- dbGetQuery(con, QAmerIndian)
povID <- dbGetQuery(con, QPov)
infantID <- dbGetQuery(con, Qinfant)
childID <- dbGetQuery(con, Qchild)
adultID <- dbGetQuery(con, Qadult)
seniorID <- dbGetQuery(con, Qsenior)
#Population characteristics into pop dataframe
pop$Race[pop$ID %in% whiteID$WhiteID] <- "White"
pop$Race[pop$ID %in% asianID$AsianID] <- "Asian"
pop$Race[pop$ID %in% blackID$BlackID] <- "Black"
pop$Race[pop$ID %in% hispanicID$HispanicID] <- "Hispanic"
pop$Race[pop$ID %in% multiraceID$MultiraceID] <- "Multirace"
pop$Race[pop$ID %in% amerindianID$AmerIndianID] <- "American Indian"
pop$Race[pop$ID %in% asianID$AsianID] <- "Asian"
age <- dbGetQuery(con, "SELECT AGE FROM Individuals;")
pop$Age <- age$AGE
pop$Income[pop$ID %in% povID] <- "Poverty"
pop$Income[!(pop$ID %in% povID)] <- "No Poverty"
#pop$Region <- dbGetQuery(con, "SELECT H.Region_Num FROM Household H, Individuals I WHERE I.Household_ID = H.Household_ID;") FIX THIS REGION ORDERING
pop$health_status <- 0 #everyone healthy
pop$health_status[pop$ID %in% inf_IDs] <- 1 #initial infected in health_status
pop$inf_count <- 0 #0 people initially infected
pop$k_node <- 0 #everyone not k_node
pop$Purdue <- "No"
purdue <- dbGetQuery(con, "SELECT I.Person_ID AS Person_ID FROM Individuals I, Works_At W WHERE I.Person_ID = W.Person_ID AND W.Work_ID = 1000")
pop$Purdue[purdue$Person_ID] <- "Yes"
region <- dbGetQuery(con, "SELECT I.Person_ID AS ID, R.Region_Num AS Region FROM Region R, Individuals I, Household H WHERE I.Household_ID = H.Household_ID AND H.Region_Num = R.Region_Num;")
pop$Region[region$ID] <- region$Region[pop$ID %in% region$ID]
save(pop, file = "pop.rda")
schools <- dbGetQuery(con, "SELECT I.Person_ID AS ID FROM Individuals I, Works_At W WHERE I.Person_ID = W.Person_ID AND W.Work_ID IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);")
pop$School <- "No"
pop$School[schools$ID] <- "Yes"
bus <- dbGetQuery(con, "SELECT I.Person_ID AS ID FROM Individuals I, Household H WHERE I.Household_ID = H.Household_ID AND H.PubTrans = 'YES';")
pop$Bus <- "No"
pop$Bus[bus$ID] <- "Yes"
################################################ Functions ###########################################
#Disease factor function
f <- function(df, contagious){
within(df, Weight <- Weight * (contagious)) ## CHANGE DISEASE MULTIPLIER HERE
}
#randomize order of contacts
randomize <- function(df)
{
df <- df[sample(nrow(df)),]
}
#number of contacts shortened to 50
shorten <- function(df)
{
df <- df[c(1:50),]
}
#Determines number of contacts per person per day, and split up into work, bus community
contacts <- function(meanContactsDay){
nContacts <- rpois(1,meanContactsDay)
if(nContacts >50 ){nContacts = 50}
else if (nContacts == 0){nContacts = 1}
return(nContacts)
}
#Returns queried edges by concatenating strings
getEdges <- function(inf_ID, Query, QueryEnd, numContacts){
SQL <- paste0(Query, inf_ID, QueryEnd, numContacts, ";")
SQL <- gsub("[\n]", " ", SQL)
edges <- dbGetQuery(con, SQL) #concatenates inf_ID with query
return(edges)
}
#Gets multiplier for region density for community contacts
getDenMultiplier <- function(inf_ID, QDensity, meanDensity){
SQL <- paste0(QDensity, inf_ID, ";")
SQL <- gsub("[\n]", " ", SQL)
density <- dbGetQuery(con, SQL) #concatenates inf_ID with query
multiplier <- density/meanDensity
return(as.numeric(multiplier))
}
raceMult <- function(all_edges, asianID, blackID, hispanicID, amerindianID, multiraceID, raceWeight){
all_edges$Weight[all_edges$Person_ID %in% asianID$AsianID] <-  all_edges$Weight[all_edges$Person_ID %in% asianID$AsianID] * raceWeight[1]
all_edges$Weight[all_edges$Person_ID %in% blackID$BlackID] <-  all_edges$Weight[all_edges$Person_ID %in% blackID$BlackID] * raceWeight[2]
all_edges$Weight[all_edges$Person_ID %in% hispanicID$HispanicID] <-  all_edges$Weight[all_edges$Person_ID %in% hispanicID$HispanicID] * raceWeight[3]
all_edges$Weight[all_edges$Person_ID %in% amerindianID$AmerIndianID] <-  all_edges$Weight[all_edges$Person_ID %in% amerindianID$AmerIndianID] * raceWeight[4]
all_edges$Weight[all_edges$Person_ID %in% multiraceID$MultiraceID] <-  all_edges$Weight[all_edges$Person_ID %in% multiraceID$MultiraceID] * raceWeight[5]
return(all_edges)
}
ageMult <- function(all_edges, infantID, childID, adultID, seniorID, ageWeight){
all_edges$Weight[all_edges$Person_ID %in% infantID$infantID] <- all_edges$Weight[all_edges$Person_ID %in% infantID$infantID] * ageWeight[1]
all_edges$Weight[all_edges$Person_ID %in% childID$childID] <- all_edges$Weight[all_edges$Person_ID %in% childID$childID] * ageWeight[2]
all_edges$Weight[all_edges$Person_ID %in% adultID$adultID] <- all_edges$Weight[all_edges$Person_ID %in% adultID$adultID] * ageWeight[3]
all_edges$Weight[all_edges$Person_ID %in% seniorID$seniorID] <- all_edges$Weight[all_edges$Person_ID %in% seniorID$seniorID] * ageWeight[4]
return(all_edges)
}
Weight2Prob <- function(all_edges){
all_edges$Weight <- 1 - exp(-all_edges$Weight)
return(all_edges)
}
gets_sick <- function(all_edges){
randNo <- runif(length(all_edges$Weight),0,1)
sickID <- all_edges$Person_ID[which(randNo < all_edges$Weight)]
return(sickID)
}
dead <- function(inf_IDs, diseaseType, infantID, childID, adultID, seniorID, deathRate){
diseaseWeight <- 1 #base
if (diseaseType == 2){diseaseWeight <- 150} #smallpox
else if (diseaseType == 3){diseaseWeight <- 3} #Measels
else if (diseaseType == 4){diseaseWeight <- 500} #Ebola
inf <- data.frame(Person_ID = inf_IDs, Weight = diseaseWeight)
temp <- ageMult(inf, infantID, childID, adultID, seniorID, deathRate)
inf$Weight <- temp$Weight #put updated weight onto inf_people
randNo <- runif(length(inf_IDs),0,1)
dead_ID <- inf$Person_ID[which(randNo < inf$Weight)]
return(dead_ID)
}
recovered <- function(inf_IDs, diseaseType, RecoveryRate, dead_ID){
if (diseaseType == 2){RecoveryRate <- RecoveryRate*(6/20)} #smallpox #See project report citations
else if (diseaseType == 3){RecoveryRate <- RecoveryRate*(6/8)} #Measels
else if (diseaseType == 4){RecoveryRate <- RecoveryRate*(6/5)} #Ebola ? data
inf <- data.frame(Person_ID = inf_IDs, Weight = RecoveryRate)
randNo <- runif(length(inf_IDs),0,1)
recov_ID <- inf$Person_ID[which(randNo < inf$Weight)]
recov_ID <- recov_ID[!(recov_ID %in% dead_ID)]
return(recov_ID)
}
#
###########################################Disease spread model#########################################
#Loaded edge list of POSSIBLE contacts per person precalculated in EdgelistRetrieve.R
listDf2 <- pblapply(listDf, f, contagious) #factor in disease type multiplier
load("Case26.rda")
susceptible[91]
numInfected[90]
numInfected[91
]
inf_IDs <- vector()
for (inf_ID in inf_IDs){
cat(inf_ID)
}
for (inf_ID in inf_IDs){
cat(inf_ID)
}
for (inf_ID in inf_IDs){
cat(inf_ID)
}
for (inf_ID in inf_IDs){
cat(inf_ID)
}
for (inf_ID in inf_IDs){
cat(inf_ID)
}
for (day in 1:20){
for (inf_ID in inf_IDs){
cat(inf_ID)
cat(day)
}
}
for (day in 1:20){
for (inf_ID in inf_IDs){
cat(inf_ID)
cat(day)
}
cat(day)
}
susceptible[91:100]<-0
numRecovered[80:91]
numRecovered[92:100] <- 135618
numDead[91]
numDead[85]
numDead[92:100] <- 4952
numInfected[91]
numInfected[92:100] <- 0
totalPeople <- length(pop$ID)
pctSus <- (susceptible/totalPeople) * 100
pctInf <- (numInfected/totalPeople)*100
pctRecov <- (numRecovered/totalPeople)*100
pctDead <- (numDead/totalPeople)*100
#Code is taken and modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
animate <- function(duration, pctSus, pctInf, pctRecov, pctDead){
#Set delay between frames when replaying
ani.options(interval=.05)
# Set up a vector of colors for use below
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:duration) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
plot(-5, xlim = c(1,duration), ylim = c(0, .3), axes = F, xlab = "", ylab = "", main = "Day")
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set up the bottom chart
plot(pctSus[1:i], main = "SIR Model of Influenza Pandemic within West Lafayette and Lafayette Population over 100 days", type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue")
lines(pctInf[1:i], type = "l", col = "red")
lines(pctRecov[1:i], type = "l", col = "green")
lines(pctDead[1:i], type = "l", col = "black")
legend(87.5, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead"),
col=c("blue", "red", "green", "black"), lwd= 1, cex=0.8)
}
}, movie.name = "Case2.gif")
}
animate(100,pctSus,pctInf, pctRecov, pctDead)
totalPeople <- length(pop$ID)
pctSus <- (susceptible/totalPeople) * 100
pctInf <- (numInfected/totalPeople)*100
pctRecov <- (numRecovered/totalPeople)*100
pctDead <- (numDead/totalPeople)*100
#Code is taken and modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
animate <- function(duration, pctSus, pctInf, pctRecov, pctDead){
#Set delay between frames when replaying
ani.options(interval=.05)
# Set up a vector of colors for use below
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:duration) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
plot(-5, xlim = c(1,duration), ylim = c(0, .3), axes = F, xlab = "", ylab = "", main = "Day")
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set up the bottom chart
plot(pctSus[1:i], main = "SIR Model of Influenza Pandemic within West Lafayette and Lafayette Population over 100 days", type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue")
lines(pctInf[1:i], type = "l", col = "red")
lines(pctRecov[1:i], type = "l", col = "green")
lines(pctDead[1:i], type = "l", col = "black")
legend(87.5, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead"),
col=c("blue", "red", "green", "black"), lwd= 1, cex=0.8)
}
}, movie.name = "Case26.gif")
}
animate(100,pctSus,pctInf, pctRecov, pctDead)
#Code is taken and modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
library(animation)
load("Case13.rda")
totalPeople <- length(pop$ID)
pctSus <- (susceptible/totalPeople) * 100
pctInf <- (numInfected/totalPeople)*100
pctRecov <- (numRecovered/totalPeople)*100
pctDead <- (numDead/totalPeople)*100
#Code is taken and modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
animate <- function(duration, pctSus, pctInf, pctRecov, pctDead){
#Set delay between frames when replaying
ani.options(interval=.05)
# Set up a vector of colors for use below
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:duration) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
plot(-5, xlim = c(1,duration), ylim = c(0, .3), axes = F, xlab = "", ylab = "", main = "Day")
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set up the bottom chart
plot(pctSus[1:i], main = "SIR Model of Influenza Pandemic within West Lafayette and Lafayette Population over 100 days", type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue")
lines(pctInf[1:i], type = "l", col = "red")
lines(pctRecov[1:i], type = "l", col = "green")
lines(pctDead[1:i], type = "l", col = "black")
legend(87.5, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead"),
col=c("blue", "red", "green", "black"), lwd= 1, cex=0.8)
}
}, movie.name = "Case13.gif")
}
animate(100,pctSus,pctInf, pctRecov, pctDead)
#Code is taken and modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
numInfected[91]
numInfected[100]
numInfected[80]
numInfected[50]
numInfected[20]
animate(100,pctSus,pctInf, pctRecov, pctDead)
animate <- function(duration, pctSus, pctInf, pctRecov, pctDead){
#Set delay between frames when replaying
ani.options(interval=.05)
# Set up a vector of colors for use below
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:duration) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
plot(-5, xlim = c(1,duration), ylim = c(0, .3), axes = F, xlab = "", ylab = "", main = "Day")
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set up the bottom chart
plot(pctSus[1:i], main = "SIR Model of Smallpox Pandemic within West Lafayette and Lafayette Population over 100 days", type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue")
lines(pctInf[1:i], type = "l", col = "red")
lines(pctRecov[1:i], type = "l", col = "green")
lines(pctDead[1:i], type = "l", col = "black")
legend(87.5, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead"),
col=c("blue", "red", "green", "black"), lwd= 1, cex=0.8)
}
}, movie.name = "Case13.gif")
}
animate(100,pctSus,pctInf, pctRecov, pctDead)
#Code is taken and modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
library(animation)
load("Case14.rda")
totalPeople <- length(pop$ID)
pctSus <- (susceptible/totalPeople) * 100
pctInf <- (numInfected/totalPeople)*100
pctRecov <- (numRecovered/totalPeople)*100
pctDead <- (numDead/totalPeople)*100
#Code is taken and modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
animate <- function(duration, pctSus, pctInf, pctRecov, pctDead){
#Set delay between frames when replaying
ani.options(interval=.05)
# Set up a vector of colors for use below
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:duration) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
plot(-5, xlim = c(1,duration), ylim = c(0, .3), axes = F, xlab = "", ylab = "", main = "Day")
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set up the bottom chart
plot(pctSus[1:i], main = "SIR Model of Smallpox Pandemic within West Lafayette and Lafayette Population over 100 days", type = "l", xlab = "Day", ylab = "Percentage of Population", xlim = c(0,duration), ylim = c(0, 100), col = "blue")
lines(pctInf[1:i], type = "l", col = "red")
lines(pctRecov[1:i], type = "l", col = "green")
lines(pctDead[1:i], type = "l", col = "black")
legend(87.5, 100, legend=c("Suceptible", "Infected", "Recovered", "Dead"),
col=c("blue", "red", "green", "black"), lwd= 1, cex=0.8)
}
}, movie.name = "Case14.gif")
}
animate(100,pctSus,pctInf, pctRecov, pctDead)
#Code is taken and modified from https://www.r-bloggers.com/animations-in-r/ to fit our model.
